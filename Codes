function digitalCipher(message,key){
    let ar = [];
    key = key.toString().split("")
    let char = 'abcdefghijklmnopqrstuvwxyz'
    let map = message.split("").map((v)=> char.indexOf(v)+1)
    for(let i=0;i<map.length;i++){
       ar.push(map[i] + Number(key[i % 4]))
    }
    console.log(ar)
    return ar;
}
digitalCipher('scout',1939)
//output -[ 14, 10, 22, 29, 6, 27, 19, 18, 6, 12, 8 ]

function solution(x){
    let len = x.length;note = '';
    let str = '+';
    for(let i=0;i<len;i++){
        note += (x[i]*Math.pow(10,(len-1)-i)) + str;
       //console.log(note);
    }
    let output = (note.slice(0,note.length-1));
    //console.log(output)
    return output;
}
solution('666')// 600+60+6

function solution(x){
    let len = x.length;note = '';
    let str = ' + ';
    for(let i=0;i<len;i++){
        note += (x[i]*Math.pow(10,(len-1)-i)) + str;
       //console.log(note);
    }
    let output = (note.slice(0,note.length-2));
    console.log( output)
    return output;
}
solution('666') //spaced output;

function maxColumn(arr,n){
    let len = arr.length;
    let ar = [];col = [],sum = 0;
    for(let i=0;i<arr.length;i+=n){
    ar.push(arr.slice(i,i+n))
    }
    var res = [];
   for(var i=0;i<ar.length;i++){
 for(var j=0;j<n;j++){
  (res[j] = (res[j] || 0) + ar[i][j])
 }
   }
 console.log(res)
 let max = res.indexOf(Math.max(...res))
console.log(max+1)
return max+1;
}
maxColumn([4,14,12,7,14,16,5,13,7,16,11,19],4)
maxColumn([1,3,15,5,16,3,4,9,20],3)


function text(str){
    if(str.length !== 9 || (/[^a-z]/).test(str)){
        console.log("Invalid")
        return;
    }
    let ar = []
   for(let i=0;i<str.length;i+=3){
       ar.push(str.slice(i,i+3))
   }
  
   let char = "abcdefghijklmnopqrstuvwxyz"
    ar[0] = ar[0].replace(ar[0][0],(char.indexOf(ar[0][0])+1))
    ar[0] = ar[0].replace(ar[0][3],(char.indexOf(ar[0][3]))+1)
    //second sub
    ar[1] = ar[1].split("").reverse().join("")
    //third 
    for(let i=0;i<ar[2].length;i++){
        if(ar[2][i] == 'z'){
        ar[2] = ar[2].replace(ar[2][i], a)
        }
        ar[2] = ar[2].replace(ar[2][i],char[char.indexOf(ar[2][i])+1])
    }
    //total str
    let st = ar[1]+ar[2]+ar[0]
  console.log(ar,st)
   return st;
}
text("mubashirh")
text("mattLooph")


function shopping(arr,n){
    let sum = arr.reduce((a,b)=> a+b)
    let weight = n * 10
   return (sum <= weight ? 'true' : 'false')
    //console.log(sum,weight)
}
shopping([2,1,2,5,4,3,6,1,1,9,3,2],4)  





function eat(arr){
    let ar = [],sum = arr[0];
    for (let i=0;i<arr.length;i++){
        if(sum > arr[i+1]){
           sum += arr[i+1]
        }
        if(sum < arr[i]){
        var half = arr.slice(i)
        }
    }
      ar.push(sum)
     ar =   ar.concat(half)
     let op = ar.filter((v)=> v !== undefined)
     console.log(op)
     return op;
}
eat([5,3,7])
eat([5,1,9])

function maxSubarray(arr,n,m)
{

    let x = 0;

    let prefix = 0;

    let maxim = 0;

    let S = new Set();
    S.add(0);
   // Traversing the arr
    for (let i = 0; i < n; i++)
    {
     // Finding prefix sum.
      prefix = (prefix + arr[i]) % m;
      maxim = Math.max(maxim, prefix);


      let it = 0;
      for (let j of S.values())
      {
        if (j >= prefix + 1)
          it = j;
      }
      if (it != 0)
      {
        maxim = Math.max(maxim, prefix - it + m);
      }
      S.add(prefix);
    }
    return maxim;
}


//string
function compareStrings(a,b){
    var ar = []
    let i = 0
    while(b.length > 0){
        if(a[i] < b[i] || a[i] == b[i]){
            ar.push(a[i])
           a = a.replace(a[i],'')
         // console.log(ar)
        }
        if(a[i] > b[i]){
            ar.push(b[i])
          b =  b.replace(b[i],'')
          //console.log(ar)
    }
    if( a.length == 0 || b.length== 0) break;
    }
    console.log(ar.concat(b.split('')))
    
}
compareStrings('ACA','BCF')


//Jumbling strings
function solve(str) {
    let arr = str.split(" ");
      let pq = []
           for (let i = 0; i < arr.length;
               i++) {
               let s = arr[i];
               let N = "";
               let a = 0;
               while (s.charAt(a) != '-') {
                   N += s.charAt(a);                  a++;
               }
               let num = parseInt(N);
               let word = s.slice(a + 1);
               pq.push({ 'first': num, 'second': word });
           }
           pq.sort(function (a, b) { return a.first - b.first })
           let sb = "";
           let k = 0;
           while (k < pq.length) {
               sb += pq[k].second + " ";
               k++;
           }
        console.log(sb)
           return sb
       }
      solve("19-Love 10-I 2001-cricket");

function count(str){
var num = str.match(/[A-Z]/g)
var lower = str.match(/[a-z]/g)
let char = 'abcdefghijklmnopqrstuvwxyz'
let upper = char.toUpperCase()
let map = num.map((v)=> upper.indexOf(v)+1)
console.log(num,lower,map)
}
count("abc ABC Abc")



function Balanced_Substring(str, n)
{

    // To store required answer

    let ans = 0;
 

    // Vector to stores the number of

    // balanced brackets at each depth.

    let arr = new Array(n / 2 + 1).fill(0);
 

    // d stores checks the depth of our sequence

    // For example level of () is 1

    // and that of (()) is 2.

    let d = 0;

    for (let i = 0; i < n; i++) {

        // If open bracket

        // increase depth

        if (str[i] == '(')

            d++;
 

        // If closing bracket

        else {

            if (d == 1) {

                for (let j = 2; j <= parseInt(n / 2) + 

                1 && arr[j] != 0; j++)

                    arr[j] = 0;

            }

            ++ans;

            ans += arr[d];

            arr[d]++;

            d--;

        }

    }
 

    // Return the required answer

    return ans;
}
 
// Driver code

    let str = "()()()";
 

    let n = str.length;



//Burgers sol
function maxLoot(hval,n)
{

    // base case

    if (n < 0) {

        return 0;

    }
 

    if (n == 0) {

        return hval[0];

    }

    // if current element is pick then previous cannot be

    // picked

    let pick = hval[n] + maxLoot(hval, n - 2);

    // if current element is not picked then previous

    // element is picked

    let notPick = maxLoot(hval, n - 1);
 

    // return max of picked and not picked

    return Math.max(pick, notPick);
}
 
// Driver to test above code
 
let hval = [ 6, 7, 1, 3, 8, 2, 4 ];
let n = hval.length;
